// <auto-generated />
using System;
using EatSomewhere.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EatSomewhere.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250421115221_first_migration_tm")]
    partial class first_migration_tm
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AssemblyUser", b =>
                {
                    b.Property<string>("AssemblyId")
                        .HasColumnType("text");

                    b.Property<string>("UsersId")
                        .HasColumnType("text");

                    b.HasKey("AssemblyId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AssemblyUser");
                });

            modelBuilder.Entity("AssemblyUser1", b =>
                {
                    b.Property<string>("AdminsId")
                        .HasColumnType("text");

                    b.Property<string>("Assembly1Id")
                        .HasColumnType("text");

                    b.HasKey("AdminsId", "Assembly1Id");

                    b.HasIndex("Assembly1Id");

                    b.ToTable("AssemblyUser1");
                });

            modelBuilder.Entity("AssemblyUser2", b =>
                {
                    b.Property<string>("Assembly2Id")
                        .HasColumnType("text");

                    b.Property<string>("PendingId")
                        .HasColumnType("text");

                    b.HasKey("Assembly2Id", "PendingId");

                    b.HasIndex("PendingId");

                    b.ToTable("AssemblyUser2");
                });

            modelBuilder.Entity("EatSomewhere.Data.Assembly", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Assemblies");
                });

            modelBuilder.Entity("EatSomewhere.Data.Bill", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("FoodEntryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Persons")
                        .HasColumnType("integer");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FoodEntryId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("UserId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("EatSomewhere.Data.Food", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("AssemblyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonCount")
                        .HasColumnType("integer");

                    b.Property<string>("Recipe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssemblyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("EatSomewhere.Data.FoodEntry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("AssemblyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PayedById")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssemblyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FoodId");

                    b.HasIndex("PayedById");

                    b.ToTable("FoodEntries");
                });

            modelBuilder.Entity("EatSomewhere.Data.FoodParticipant", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("AdditionalPersons")
                        .HasColumnType("integer");

                    b.Property<string>("FoodEntryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FoodEntryId");

                    b.HasIndex("UserId");

                    b.ToTable("FoodParticipant");
                });

            modelBuilder.Entity("EatSomewhere.Data.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("AssemblyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Unit")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssemblyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("EatSomewhere.Data.IngredientEntry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("IngredientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientEntries");
                });

            modelBuilder.Entity("EatSomewhere.Data.Tag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("AssemblyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssemblyId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("EatSomewhere.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EatSomewhere.Users.UserSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Origin")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ValidUnti")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("FoodIngredientEntry", b =>
                {
                    b.Property<string>("FoodsId")
                        .HasColumnType("text");

                    b.Property<string>("IngredientsId")
                        .HasColumnType("text");

                    b.HasKey("FoodsId", "IngredientsId");

                    b.HasIndex("IngredientsId");

                    b.ToTable("FoodIngredientEntry");
                });

            modelBuilder.Entity("FoodTag", b =>
                {
                    b.Property<string>("FoodId")
                        .HasColumnType("text");

                    b.Property<string>("TagsId")
                        .HasColumnType("text");

                    b.HasKey("FoodId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("FoodTag");
                });

            modelBuilder.Entity("AssemblyUser", b =>
                {
                    b.HasOne("EatSomewhere.Data.Assembly", null)
                        .WithMany()
                        .HasForeignKey("AssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatSomewhere.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssemblyUser1", b =>
                {
                    b.HasOne("EatSomewhere.Users.User", null)
                        .WithMany()
                        .HasForeignKey("AdminsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatSomewhere.Data.Assembly", null)
                        .WithMany()
                        .HasForeignKey("Assembly1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssemblyUser2", b =>
                {
                    b.HasOne("EatSomewhere.Data.Assembly", null)
                        .WithMany()
                        .HasForeignKey("Assembly2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatSomewhere.Users.User", null)
                        .WithMany()
                        .HasForeignKey("PendingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EatSomewhere.Data.Bill", b =>
                {
                    b.HasOne("EatSomewhere.Data.FoodEntry", "FoodEntry")
                        .WithMany("Bills")
                        .HasForeignKey("FoodEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatSomewhere.Users.User", "Recipient")
                        .WithMany("ReceivedBills")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatSomewhere.Users.User", "User")
                        .WithMany("Bills")
                        .HasForeignKey("UserId");

                    b.Navigation("FoodEntry");

                    b.Navigation("Recipient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EatSomewhere.Data.Food", b =>
                {
                    b.HasOne("EatSomewhere.Data.Assembly", "Assembly")
                        .WithMany("Foods")
                        .HasForeignKey("AssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatSomewhere.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("Assembly");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("EatSomewhere.Data.FoodEntry", b =>
                {
                    b.HasOne("EatSomewhere.Data.Assembly", "Assembly")
                        .WithMany("FoodEntries")
                        .HasForeignKey("AssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatSomewhere.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatSomewhere.Data.Food", "Food")
                        .WithMany("FoodEntries")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatSomewhere.Users.User", "PayedBy")
                        .WithMany("PayedFoodEntries")
                        .HasForeignKey("PayedById");

                    b.Navigation("Assembly");

                    b.Navigation("CreatedBy");

                    b.Navigation("Food");

                    b.Navigation("PayedBy");
                });

            modelBuilder.Entity("EatSomewhere.Data.FoodParticipant", b =>
                {
                    b.HasOne("EatSomewhere.Data.FoodEntry", "FoodEntry")
                        .WithMany("Participants")
                        .HasForeignKey("FoodEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatSomewhere.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("FoodEntry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EatSomewhere.Data.Ingredient", b =>
                {
                    b.HasOne("EatSomewhere.Data.Assembly", "Assembly")
                        .WithMany("Ingredients")
                        .HasForeignKey("AssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatSomewhere.Users.User", "CreatedBy")
                        .WithMany("Intolerances")
                        .HasForeignKey("CreatedById");

                    b.Navigation("Assembly");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("EatSomewhere.Data.IngredientEntry", b =>
                {
                    b.HasOne("EatSomewhere.Data.Ingredient", "Ingredient")
                        .WithMany("IngredientEntries")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("EatSomewhere.Data.Tag", b =>
                {
                    b.HasOne("EatSomewhere.Data.Assembly", "Assembly")
                        .WithMany()
                        .HasForeignKey("AssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assembly");
                });

            modelBuilder.Entity("FoodIngredientEntry", b =>
                {
                    b.HasOne("EatSomewhere.Data.Food", null)
                        .WithMany()
                        .HasForeignKey("FoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatSomewhere.Data.IngredientEntry", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodTag", b =>
                {
                    b.HasOne("EatSomewhere.Data.Food", null)
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatSomewhere.Data.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EatSomewhere.Data.Assembly", b =>
                {
                    b.Navigation("FoodEntries");

                    b.Navigation("Foods");

                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("EatSomewhere.Data.Food", b =>
                {
                    b.Navigation("FoodEntries");
                });

            modelBuilder.Entity("EatSomewhere.Data.FoodEntry", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("EatSomewhere.Data.Ingredient", b =>
                {
                    b.Navigation("IngredientEntries");
                });

            modelBuilder.Entity("EatSomewhere.Users.User", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Intolerances");

                    b.Navigation("PayedFoodEntries");

                    b.Navigation("ReceivedBills");
                });
#pragma warning restore 612, 618
        }
    }
}
